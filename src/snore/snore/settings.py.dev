"""
Django settings for snore project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ua-+y8!ljdzq!$8h(hgr@ud3#qouu*us@a7h@7!o2=po7$*io-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'fullurl',
    'ckeditor',
    'ckeditor_uploader',
    'haystack',

    'dashboard',
    'comments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'snore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries':{
                'dashboard_extras': 'dashboard.templatetags.dashboard_extras',
            }
        },
    },
]

WSGI_APPLICATION = 'snore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'snore',
        'USER': 'root',
        'PASSWORD': 'root.123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS' : {'charset': 'utf8mb4'},
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# site
SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = '/media/'
MEDIA_ROOT = (
     os.path.join(BASE_DIR, 'media').replace('\\', '/')
)

## CKEDITOR
CKEDITOR_UPLOAD_PATH = 'ck_images/'
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_RESTRICT_BY_USER = True
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_CONFIGS = {
    'default': {
        'tabSpaces': 4,
        'width': 'auto',
        'codeSnippet_theme': 'atelier-dune.dark',
    }
}

## 搜索
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'dashboard.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 添加此项，当数据库改变时，会自动更新索引，非常方便
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 20


## log
LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                #'format': '%(levelname)s %(asctime)s (%(process)d:%(thread)d) %(pathname)s:%(lineno)d %(message)s',
                'format': '%(levelname)s %(asctime)s %(pathname)s:%(lineno)d:%(funcName)s: %(message)s',
                },
            'simple': {
                'format': '%(levelname)s %(message)s',
                },
            },
        'filters': {
            'special': {
                #'()': 'project.logging.SpecialFilter',
                'foo': 'bar',
                },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
                },
            },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
                #'filters': ['special'],
                },
            'snore-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'log/snore-develop.log',
                },
            'snore-request-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'log/snore-develop-request.log',
                },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'log/django-develop.log',
                },
            'null': {
                'class': 'logging.NullHandler',
                },
            },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            'snore': {
                'handlers': ['console', 'snore-file'],
                'level': os.getenv('snore_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            'snore_request': {
                'handlers': ['snore-request-file'],
                'level': os.getenv('snore_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            },
}
